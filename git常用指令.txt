获取新分支
 git status
 git branch -v
git checkout solace-integration
git pull origin solace-integration

一、新建代码库
在当前目录新建一个git代码库
git init 
新建一个目录，将其初始化为git代码库
git init [project-name]
下载一个项目
git clone

二、配置
显示当前的git配置
git config -list
编辑git配置文件
git config -e [--global]
设置提交代码的用户信息
git config --global user.name "username"
git config --global user.email "useremail"

三、增加/删除文件
添加指定文件到暂存区
git add [file1] [file2] ...
添加指定目录到暂存区
git add [dir] 
添加当前左右文件到暂存区
git add .
对同一个文件的多处变化，可以实现多次提交
git add -p
删除工作区文件，并将文件放入暂存区
git rm [file1] [file2]
改名文件，并且改名后的放入暂存区
git mv [file-original] [file-renamed]

四、代码提交
提交暂存区到仓库区
git commit -m [message]/"message"  
提交暂存区指定文件到仓库区
git commit -m [file1] [file2] ... -m [message]
提交工作区自上次commit之后的变化，直接到仓库区
git commit -a
提交的时候显示所有diff信息
git commit -v
使用一次新的commit来替代上一次commit 如果代码没有任何变化 则改写上一次的提交信息
git commit --amend -m [message]
重做上一次commit 并包括指定文件的新变化
git commit --amend [file1] [file2]...

五、分支
列出本地所有分支
git branch
列出远程所有分支
git branch -r
新建一个分支 但是仍然停留在当前分支
git branch [branch-name]
新建一个分支 并切换到该分支
git checkout -b [branch-name]
新建一个分支 指向指定commit
git branch [branch-name] [commit]
新建一个分支 与指定的远程分支建立追踪关系
git branch --track [branch-name] [remote-branch]
切换到指定分支 并更新工作区
git checkout [branch-name]
切换到上一个分支
git checkout -
建立追踪关系 在现有分支与指定分支之间
git branch --set -upstream [branch] [remote-branch]
合并指定分支到当前分支
git merge [branch]
选择一个commit 合并进当前分支
git cherry-pick [commit]
删除分支
git branch -d [branch-name]
删除远程分支
git push origin --delete[branch-name]
git branch -dr[remote/branch]

六、标签
列出所有标签
git tag 
新建一个tag在当前commit
git tag [tag]
新建一个tag在指定的commit
git tag [tag] [commit]
删除本地tag
git tag -d [tag]
删除远程tag
git push origin :refs/tags/[tagName]
查看tag信息
git show [tag]
提交指定tag
git push [remote] [tag]
提交所有tag
git push [remote] --tags
新建一个分支 指向某个tag
git checkout -b [branch] [tag]

七、查看信息
显示有变更的文件
git status 
显示当前分支的历史版本
git log
显示commit历史 以及每一次commit发生变更的文件
git log --stat
搜索提交历史 根据关键词
git log -S [keyword]
显示某个commit之后的所有变动 每个commit占据一行
git log [tag] HEAD --perrty=format:%s
显示某个commit之后的所有变动 其提交说明必须符合搜索条件
git log [tag] HEAD --grep feature
显示某个文件的历史版本 包括文件改名
git log --follow[file]
git whatchanged [file]
显示指定文件相关的每一次diff
git log -p [file]
显示过去5次提交
git log -5--pretty--oneline
显示所有提交过的用户 按照提交次数排序
git shortlog -sn
显示指定文件是什么人在什么时间修改过
git blame [file]
显示暂存区和工作区的差异
git diff
显示暂存区和上一个commit间的差异
git diff --cached[file]
显示工作区与当前分支最新commit之间的差异
git diff HEAD
显示两次提交之间的差异
git diff [first-branch] [second-branch]
显示你今天写了多少行代码
git diff shortstat "@{0 day ago}"
显示某次提交的元数据和内容变化
git show [commit]
显示某次提交发生变化的文件
git show -name-only [commit]
显示某次提交时 某个文件的内容
git show [commit]:[filename]
显示当前分支的最近几次提交
git reflog

八、远程同步
下载远程仓库的所有变动
git fetch [remote]
显示所有远程仓库
git remote -v
显示某个远程仓库的信息
git remote show [remote]
增加一个新的远程仓库并命名
git romete add [shortname] [url]
取回远程仓库的变化，并与本地分支合并
git pull [remote] [branch] 
上传本地分支到远程仓库
git push [remote] [branch]
强行推送当前分支到远程仓库,即使是有冲突
git push [remote] --force
推送所有分支到远程仓库
git push [remote] --all

九、撤销
恢复暂存区的指定文件到工作区
git checkout [file]
恢复某个commit的指定文件到暂存区和工作区
git checkout [commit] [file] 
恢复暂存区的所有文件到工作区









